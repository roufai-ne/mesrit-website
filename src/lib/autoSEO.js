// src/lib/autoSEO.js
import News from '@/models/News';
import { connectDB } from './mongodb';
import newsEventBus from './eventBus';
import { SEOError, NewsErrorHandler } from './newsErrors';
import logger, { LOG_TYPES } from './logger';
import intelligentCache from './intelligentCache';

/**
 * Service SEO automatisé pour les actualités
 */
export class AutoSEOService {

  /**
   * Générer automatiquement tous les éléments SEO pour un article
   */
  static async generateAutoSEO(newsId) {
    return await NewsErrorHandler.withErrorHandling(async () => {
      await connectDB();

      const news = await News.findById(newsId);
      if (!news) {
        throw new SEOError(
          `Article non trouvé pour génération SEO: ${newsId}`,
          'generate_auto_seo'
        );
      }

      // Générer le slug unique
      const slug = await this.generateUniqueSlug(news.title, newsId);

      // Générer la meta description
      const metaDescription = this.generateMetaDescription(news.content);

      // Générer les mots-clés
      const keywords = this.extractKeywords(news.title, news.content);

      // Générer les données Open Graph
      const openGraph = this.generateOpenGraphData(news);

      // Générer les données JSON-LD
      const jsonLd = this.generateJsonLdData(news);

      // Générer les données Twitter Card
      const twitterCard = this.generateTwitterCardData(news);

      // Calculer le score SEO
      const seoScore = this.calculateSEOScore(news, {
        slug,
        metaDescription,
        keywords,
        openGraph
      });

      const seoData = {
        slug,
        metaDescription,
        keywords,
        openGraph,
        jsonLd,
        twitterCard,
        seoScore,
        lastUpdated: new Date(),
        autoGenerated: true
      };

      // Mettre à jour l'article avec les données SEO
      await News.findByIdAndUpdate(newsId, {
        slug,
        seo: seoData
      });

      // Émettre l'événement SEO
      newsEventBus.emitEvent(newsEventBus.constructor.EVENTS.SEO_UPDATED, {
        newsId,
        slug,
        seoScore: seoScore.total
      });

      // Invalider le cache
      intelligentCache.invalidateByTags(['seo', `news:${newsId}`]);

      return seoData;
    }, { operation: 'generateAutoSEO', newsId });
  }

  /**
   * Générer un slug unique à partir du titre
   */
  static async generateUniqueSlug(title, excludeNewsId = null) {
    const baseSlug = this.slugify(title);
    let slug = baseSlug;
    let counter = 1;

    while (await this.slugExists(slug, excludeNewsId)) {
      slug = `${baseSlug}-${counter}`;
      counter++;
    }

    return slug;
  }

  /**
   * Transformer un texte en slug
   */
  static slugify(text) {
    return text
      .toLowerCase()
      .trim()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '') // Supprimer les accents
      .replace(/[^a-z0-9\s-]/g, '') // Supprimer caractères spéciaux
      .replace(/\s+/g, '-') // Espaces -> tirets
      .replace(/-+/g, '-') // Tirets multiples -> un seul
      .replace(/^-|-$/g, '') // Supprimer tirets début/fin
      .substring(0, 60) // Limiter longueur
      .replace(/-[^-]*$/, ''); // Éviter de couper un mot
  }

  /**
   * Vérifier si un slug existe déjà
   */
  static async slugExists(slug, excludeNewsId = null) {
    const query = { slug };
    if (excludeNewsId) {
      query._id = { $ne: excludeNewsId };
    }

    const existing = await News.findOne(query);
    return !!existing;
  }

  /**
   * Générer une meta description optimisée
   */
  static generateMetaDescription(content, maxLength = 160) {
    // Nettoyer le contenu HTML
    const cleanContent = content
      .replace(/<[^>]*>/g, '') // Supprimer les balises HTML
      .replace(/\s+/g, ' ') // Normaliser les espaces
      .trim();

    if (cleanContent.length <= maxLength) {
      return cleanContent;
    }

    // Couper au bon endroit (phrase complète si possible)
    let description = cleanContent.substring(0, maxLength);
    const lastSentence = description.lastIndexOf('.');
    const lastSpace = description.lastIndexOf(' ');

    // Préférer couper à la fin d'une phrase
    if (lastSentence > maxLength * 0.7) {
      description = description.substring(0, lastSentence + 1);
    } else if (lastSpace > maxLength * 0.8) {
      description = description.substring(0, lastSpace) + '...';
    } else {
      description = description.substring(0, maxLength - 3) + '...';
    }

    return description;
  }

  /**
   * Extraire les mots-clés automatiquement
   */
  static extractKeywords(title, content, maxKeywords = 10) {
    // Mots vides à ignorer
    const stopWords = new Set([
      'le', 'la', 'les', 'un', 'une', 'des', 'du', 'de', 'et', 'ou', 'mais',
      'donc', 'car', 'ni', 'que', 'qui', 'quoi', 'dont', 'où', 'ce', 'cet',
      'cette', 'ces', 'mon', 'ma', 'mes', 'ton', 'ta', 'tes', 'son', 'sa',
      'ses', 'notre', 'nos', 'votre', 'vos', 'leur', 'leurs', 'je', 'tu',
      'il', 'elle', 'nous', 'vous', 'ils', 'elles', 'me', 'te', 'se', 'nous',
      'vous', 'se', 'dans', 'sur', 'avec', 'sans', 'pour', 'par', 'vers',
      'chez', 'depuis', 'pendant', 'avant', 'après', 'entre', 'parmi',
      'à', 'au', 'aux', 'en', 'y', 'ne', 'pas', 'plus', 'moins', 'très',
      'bien', 'mal', 'beaucoup', 'peu', 'assez', 'trop', 'si', 'oui', 'non'
    ]);

    // Combiner titre et contenu (titre a plus de poids)
    const text = `${title} ${title} ${content}`.toLowerCase();

    // Nettoyer et extraire les mots
    const words = text
      .replace(/<[^>]*>/g, '') // Supprimer HTML
      .replace(/[^\w\sàâäéèêëïîôöùûüÿç]/g, ' ') // Garder que lettres et espaces
      .split(/\s+/)
      .filter(word =>
        word.length >= 3 &&
        !stopWords.has(word) &&
        !/^\d+$/.test(word) // Exclure les nombres
      );

    // Compter les occurrences
    const wordCount = {};
    words.forEach(word => {
      wordCount[word] = (wordCount[word] || 0) + 1;
    });

    // Trier par fréquence et garder les meilleurs
    const keywords = Object.entries(wordCount)
      .sort(([,a], [,b]) => b - a)
      .slice(0, maxKeywords)
      .map(([word]) => word);

    return keywords;
  }

  /**
   * Générer les données Open Graph
   */
  static generateOpenGraphData(news) {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://mesrit.ma';

    return {
      type: 'article',
      title: news.title,
      description: this.generateMetaDescription(news.content),
      url: `${baseUrl}/actualites/${news.slug || news._id}`,
      image: news.image ? `${baseUrl}${news.image}` : `${baseUrl}/images/default-news.jpg`,
      site_name: 'MESRIT - Ministère de l\'Enseignement Supérieur',
      locale: 'fr_MA',
      article: {
        published_time: news.date?.toISOString(),
        modified_time: news.updatedAt?.toISOString(),
        author: 'MESRIT',
        section: news.category,
        tag: this.extractKeywords(news.title, news.content, 5)
      }
    };
  }

  /**
   * Générer les données JSON-LD (Schema.org)
   */
  static generateJsonLdData(news) {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://mesrit.ma';

    return {
      '@context': 'https://schema.org',
      '@type': 'NewsArticle',
      headline: news.title,
      description: this.generateMetaDescription(news.content),
      image: news.image ? `${baseUrl}${news.image}` : `${baseUrl}/images/default-news.jpg`,
      author: {
        '@type': 'Organization',
        name: 'MESRIT',
        url: baseUrl
      },
      publisher: {
        '@type': 'Organization',
        name: 'MESRIT - Ministère de l\'Enseignement Supérieur',
        logo: {
          '@type': 'ImageObject',
          url: `${baseUrl}/images/logos/mesrit-logo.png`
        }
      },
      datePublished: news.date?.toISOString(),
      dateModified: news.updatedAt?.toISOString(),
      mainEntityOfPage: {
        '@type': 'WebPage',
        '@id': `${baseUrl}/actualites/${news.slug || news._id}`
      },
      articleSection: news.category,
      keywords: this.extractKeywords(news.title, news.content, 10).join(', ')
    };
  }

  /**
   * Générer les données Twitter Card
   */
  static generateTwitterCardData(news) {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://mesrit.ma';

    return {
      card: 'summary_large_image',
      site: '@MESRIT_Official',
      title: news.title,
      description: this.generateMetaDescription(news.content, 200),
      image: news.image ? `${baseUrl}${news.image}` : `${baseUrl}/images/default-news.jpg`,
      url: `${baseUrl}/actualites/${news.slug || news._id}`
    };
  }

  /**
   * Calculer un score SEO automatique
   */
  static calculateSEOScore(news, seoData) {
    let score = 0;
    const checks = {
      titleLength: 0,
      titleKeywords: 0,
      metaDescription: 0,
      contentLength: 0,
      headings: 0,
      images: 0,
      keywords: 0,
      slug: 0
    };

    // Titre (20 points max)
    if (news.title) {
      const titleLength = news.title.length;
      if (titleLength >= 30 && titleLength <= 60) {
        checks.titleLength = 20;
      } else if (titleLength >= 20 && titleLength <= 70) {
        checks.titleLength = 15;
      } else {
        checks.titleLength = 5;
      }
    }

    // Mots-clés dans le titre (15 points max)
    if (seoData.keywords.length > 0) {
      const titleLower = news.title.toLowerCase();
      const keywordsInTitle = seoData.keywords.filter(keyword =>
        titleLower.includes(keyword.toLowerCase())
      ).length;
      checks.titleKeywords = Math.min(keywordsInTitle * 5, 15);
    }

    // Meta description (15 points max)
    if (seoData.metaDescription) {
      const descLength = seoData.metaDescription.length;
      if (descLength >= 120 && descLength <= 160) {
        checks.metaDescription = 15;
      } else if (descLength >= 100 && descLength <= 180) {
        checks.metaDescription = 10;
      } else {
        checks.metaDescription = 5;
      }
    }

    // Longueur du contenu (15 points max)
    if (news.content) {
      const contentLength = news.content.replace(/<[^>]*>/g, '').length;
      if (contentLength >= 1000) {
        checks.contentLength = 15;
      } else if (contentLength >= 500) {
        checks.contentLength = 10;
      } else if (contentLength >= 200) {
        checks.contentLength = 5;
      }
    }

    // Présence d'images (10 points max)
    if (news.image || (news.images && news.images.length > 0)) {
      checks.images = 10;
    }

    // Qualité des mots-clés (15 points max)
    if (seoData.keywords && seoData.keywords.length >= 5) {
      checks.keywords = 15;
    } else if (seoData.keywords && seoData.keywords.length >= 3) {
      checks.keywords = 10;
    } else {
      checks.keywords = 5;
    }

    // Qualité du slug (10 points max)
    if (seoData.slug) {
      const slugLength = seoData.slug.length;
      if (slugLength >= 20 && slugLength <= 60) {
        checks.slug = 10;
      } else if (slugLength >= 10 && slugLength <= 80) {
        checks.slug = 7;
      } else {
        checks.slug = 3;
      }
    }

    // Score total
    const total = Object.values(checks).reduce((sum, value) => sum + value, 0);

    return {
      total,
      percentage: Math.round((total / 100) * 100),
      checks,
      recommendations: this.generateSEORecommendations(checks, news)
    };
  }

  /**
   * Générer des recommandations SEO
   */
  static generateSEORecommendations(checks, news) {
    const recommendations = [];

    if (checks.titleLength < 15) {
      recommendations.push({
        type: 'title',
        priority: 'high',
        message: 'Optimisez la longueur du titre (30-60 caractères recommandés)'
      });
    }

    if (checks.titleKeywords < 10) {
      recommendations.push({
        type: 'keywords',
        priority: 'medium',
        message: 'Incluez plus de mots-clés pertinents dans le titre'
      });
    }

    if (checks.metaDescription < 10) {
      recommendations.push({
        type: 'meta',
        priority: 'high',
        message: 'Améliorez la meta description (120-160 caractères)'
      });
    }

    if (checks.contentLength < 10) {
      recommendations.push({
        type: 'content',
        priority: 'medium',
        message: 'Enrichissez le contenu (minimum 500 mots recommandés)'
      });
    }

    if (checks.images === 0) {
      recommendations.push({
        type: 'images',
        priority: 'medium',
        message: 'Ajoutez des images pertinentes à l\'article'
      });
    }

    return recommendations;
  }

  /**
   * Générer un sitemap automatique
   */
  static async generateSitemap() {
    return await NewsErrorHandler.withErrorHandling(async () => {
      await connectDB();

      const publishedNews = await News.find({
        status: 'published'
      }).select('slug date updatedAt').sort({ date: -1 });

      const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://mesrit.ma';

      const urls = publishedNews.map(news => ({
        loc: `${baseUrl}/actualites/${news.slug || news._id}`,
        lastmod: (news.updatedAt || news.date).toISOString(),
        changefreq: 'weekly',
        priority: '0.8'
      }));

      // Ajouter les pages statiques
      urls.unshift(
        {
          loc: baseUrl,
          lastmod: new Date().toISOString(),
          changefreq: 'daily',
          priority: '1.0'
        },
        {
          loc: `${baseUrl}/actualites`,
          lastmod: new Date().toISOString(),
          changefreq: 'daily',
          priority: '0.9'
        }
      );

      return urls;
    }, { operation: 'generateSitemap' });
  }

  /**
   * Audit SEO complet pour un article
   */
  static async auditNewsSEO(newsId) {
    return await NewsErrorHandler.withErrorHandling(async () => {
      await connectDB();

      const news = await News.findById(newsId);
      if (!news) {
        throw new SEOError(
          `Article non trouvé pour audit SEO: ${newsId}`,
          'audit_seo'
        );
      }

      const audit = {
        newsId,
        auditDate: new Date(),
        issues: [],
        warnings: [],
        suggestions: [],
        score: 0
      };

      // Vérifications critiques
      if (!news.title || news.title.length < 10) {
        audit.issues.push('Titre manquant ou trop court');
      }

      if (!news.content || news.content.length < 200) {
        audit.issues.push('Contenu insuffisant');
      }

      if (!news.seo?.metaDescription) {
        audit.issues.push('Meta description manquante');
      }

      if (!news.slug) {
        audit.issues.push('Slug manquant');
      }

      // Avertissements
      if (news.title && news.title.length > 70) {
        audit.warnings.push('Titre trop long pour les moteurs de recherche');
      }

      if (!news.image) {
        audit.warnings.push('Image principale manquante');
      }

      // Suggestions
      if (!news.seo?.keywords || news.seo.keywords.length < 5) {
        audit.suggestions.push('Ajouter plus de mots-clés pertinents');
      }

      if (news.seo?.seoScore?.percentage < 70) {
        audit.suggestions.push('Améliorer le score SEO global');
      }

      // Calculer le score d'audit
      const totalChecks = 10;
      const passedChecks = totalChecks - audit.issues.length - (audit.warnings.length * 0.5);
      audit.score = Math.max(0, Math.round((passedChecks / totalChecks) * 100));

      return audit;
    }, { operation: 'auditNewsSEO', newsId });
  }
}

export default AutoSEOService;