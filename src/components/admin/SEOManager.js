// src/components/admin/SEOManager.js
import React, { useState, useEffect } from 'react';
import { useSEO, useSlugGenerator, useMetaTags } from '@/hooks/useSEO';
import { 
  Search, 
  Target, 
  CheckCircle, 
  AlertCircle, 
  XCircle,
  TrendingUp,
  Eye,
  Link,
  FileText,
  Image,
  Hash,
  Zap,
  BarChart3,
  RefreshCw,
  X
} from 'lucide-react';

export default function SEOManager({ newsId, article, onClose, onUpdate }) {
  const { loading, analyzeSEO, optimizeArticle } = useSEO();
  const { generateSlug } = useSlugGenerator();
  const { generateMetaTags } = useMetaTags();
  
  const [analysis, setAnalysis] = useState(null);
  const [seoData, setSeoData] = useState({
    metaTitle: '',
    metaDescription: '',
    slug: ''
  });
  const [autoGenerated, setAutoGenerated] = useState({
    metaTitle: '',
    metaDescription: '',
    slug: ''
  });

  useEffect(() => {
    if (article) {
      setSeoData({
        metaTitle: article.metaTitle || '',
        metaDescription: article.metaDescription || '',
        slug: article.slug || ''
      });
      
      // Générer automatiquement les suggestions
      generateSuggestions();
      
      // Analyser le SEO
      performAnalysis();
    }
  }, [article]);

  const generateSuggestions = async () => {
    if (!article) return;
    
    try {
      const metaTags = generateMetaTags(article);
      const slug = await generateSlug(article.title);
      
      setAutoGenerated({
        metaTitle: metaTags.metaTitle,
        metaDescription: metaTags.metaDescription,
        slug
      });
    } catch (error) {
      console.error('Erreur génération suggestions:', error);
    }
  };

  const performAnalysis = async () => {
    if (!newsId) return;
    
    try {
      const result = await analyzeSEO(newsId);
      setAnalysis(result.analysis);
    } catch (error) {
      console.error('Erreur analyse SEO:', error);
    }
  };

  const handleOptimize = async () => {
    try {
      await optimizeArticle(newsId, seoData);
      await performAnalysis();
      if (onUpdate) onUpdate();
    } catch (error) {
      console.error('Erreur optimisation:', error);
    }
  };

  const handleAutoFill = (field) => {
    setSeoData(prev => ({
      ...prev,
      [field]: autoGenerated[field]
    }));
  };

  const getScoreColor = (score) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    if (score >= 40) return 'text-orange-600';
    return 'text-red-600';
  };

  const getScoreIcon = (score) => {
    if (score >= 80) return <CheckCircle className="w-5 h-5 text-green-600" />;
    if (score >= 60) return <AlertCircle className="w-5 h-5 text-yellow-600" />;
    return <XCircle className="w-5 h-5 text-red-600" />;
  };

  const getLevelLabel = (level) => {
    const labels = {
      excellent: 'Excellent',
      good: 'Bon',
      fair: 'Moyen',
      poor: 'Faible'
    };
    return labels[level] || 'Non évalué';
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="bg-white dark:bg-secondary-800 rounded-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
        {/* En-tête */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-secondary-700">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-niger-orange/10 rounded-lg">
              <Target className="w-6 h-6 text-niger-orange" />
            </div>
            <div>
              <h2 className="text-xl font-bold text-niger-green dark:text-niger-green-light">
                Optimisation SEO
              </h2>
              <p className="text-readable-muted dark:text-muted-foreground">
                {article?.title}
              </p>
            </div>
          </div>
          
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 dark:hover:bg-secondary-700 rounded-lg transition-colors"
          >
            <X className="w-6 h-6 text-gray-500" />
          </button>
        </div>

        <div className="flex h-[calc(90vh-120px)]">
          {/* Analyse SEO */}
          <div className="w-1/3 border-r border-gray-200 dark:border-secondary-700 p-6 overflow-y-auto">
            <div className="space-y-6">
              {/* Score global */}
              {analysis && (
                <div className="text-center">
                  <div className="flex items-center justify-center space-x-2 mb-2">
                    {getScoreIcon(analysis.score)}
                    <span className={`text-2xl font-bold ${getScoreColor(analysis.score)}`}>
                      {analysis.score}/100
                    </span>
                  </div>
                  <p className="text-sm text-readable-muted dark:text-muted-foreground">
                    Niveau: {getLevelLabel(analysis.level)}
                  </p>
                </div>
              )}

              {/* Points forts */}
              {analysis?.strengths.length > 0 && (
                <div>
                  <h3 className="flex items-center space-x-2 text-sm font-semibold text-green-600 mb-3">
                    <CheckCircle className="w-4 h-4" />
                    <span>Points forts</span>
                  </h3>
                  <ul className="space-y-2">
                    {analysis.strengths.map((strength, index) => (
                      <li key={index} className="text-sm text-gray-600 dark:text-gray-400 flex items-start space-x-2">
                        <div className="w-1 h-1 bg-green-500 rounded-full mt-2 flex-shrink-0" />
                        <span>{strength}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {/* Suggestions */}
              {analysis?.suggestions.length > 0 && (
                <div>
                  <h3 className="flex items-center space-x-2 text-sm font-semibold text-yellow-600 mb-3">
                    <AlertCircle className="w-4 h-4" />
                    <span>Suggestions</span>
                  </h3>
                  <ul className="space-y-2">
                    {analysis.suggestions.map((suggestion, index) => (
                      <li key={index} className="text-sm text-gray-600 dark:text-gray-400 flex items-start space-x-2">
                        <div className="w-1 h-1 bg-yellow-500 rounded-full mt-2 flex-shrink-0" />
                        <span>{suggestion}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {/* Problèmes */}
              {analysis?.issues.length > 0 && (
                <div>
                  <h3 className="flex items-center space-x-2 text-sm font-semibold text-red-600 mb-3">
                    <XCircle className="w-4 h-4" />
                    <span>Problèmes</span>
                  </h3>
                  <ul className="space-y-2">
                    {analysis.issues.map((issue, index) => (
                      <li key={index} className="text-sm text-gray-600 dark:text-gray-400 flex items-start space-x-2">
                        <div className="w-1 h-1 bg-red-500 rounded-full mt-2 flex-shrink-0" />
                        <span>{issue}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              <button
                onClick={performAnalysis}
                disabled={loading}
                className="w-full flex items-center justify-center space-x-2 px-4 py-2 bg-niger-orange text-white rounded-lg hover:bg-niger-orange-dark transition-colors disabled:opacity-50"
              >
                <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />
                <span>Réanalyser</span>
              </button>
            </div>
          </div>

          {/* Formulaire d'optimisation */}
          <div className="w-2/3 p-6 overflow-y-auto">
            <div className="space-y-6">
              {/* Slug */}
              <div>
                <div className="flex items-center justify-between mb-2">
                  <label className="flex items-center space-x-2 text-sm font-medium text-gray-700 dark:text-gray-300">
                    <Link className="w-4 h-4" />
                    <span>Slug URL</span>
                  </label>
                  {autoGenerated.slug && autoGenerated.slug !== seoData.slug && (
                    <button
                      onClick={() => handleAutoFill('slug')}
                      className="flex items-center space-x-1 text-xs text-niger-orange hover:text-niger-orange-dark"
                    >
                      <Zap className="w-3 h-3" />
                      <span>Auto-générer</span>
                    </button>
                  )}
                </div>
                <input
                  type="text"
                  value={seoData.slug}
                  onChange={(e) => setSeoData(prev => ({ ...prev, slug: e.target.value }))}
                  className="w-full px-3 py-2 border border-niger-orange/20 rounded-lg focus:ring-2 focus:ring-niger-orange/20 focus:border-niger-orange bg-white dark:bg-secondary-700 text-niger-green dark:text-niger-green-light"
                  placeholder="mon-article-slug"
                />
                {autoGenerated.slug && (
                  <p className="text-xs text-gray-500 mt-1">
                    Suggestion: {autoGenerated.slug}
                  </p>
                )}
              </div>

              {/* Meta Title */}
              <div>
                <div className="flex items-center justify-between mb-2">
                  <label className="flex items-center space-x-2 text-sm font-medium text-gray-700 dark:text-gray-300">
                    <FileText className="w-4 h-4" />
                    <span>Meta Title</span>
                  </label>
                  {autoGenerated.metaTitle && autoGenerated.metaTitle !== seoData.metaTitle && (
                    <button
                      onClick={() => handleAutoFill('metaTitle')}
                      className="flex items-center space-x-1 text-xs text-niger-orange hover:text-niger-orange-dark"
                    >
                      <Zap className="w-3 h-3" />
                      <span>Auto-générer</span>
                    </button>
                  )}
                </div>
                <input
                  type="text"
                  value={seoData.metaTitle}
                  onChange={(e) => setSeoData(prev => ({ ...prev, metaTitle: e.target.value }))}
                  className="w-full px-3 py-2 border border-niger-orange/20 rounded-lg focus:ring-2 focus:ring-niger-orange/20 focus:border-niger-orange bg-white dark:bg-secondary-700 text-niger-green dark:text-niger-green-light"
                  placeholder="Titre optimisé pour les moteurs de recherche"
                  maxLength={60}
                />
                <div className="flex justify-between text-xs text-gray-500 mt-1">
                  <span>Recommandé: 50-60 caractères</span>
                  <span className={seoData.metaTitle.length > 60 ? 'text-red-500' : ''}>
                    {seoData.metaTitle.length}/60
                  </span>
                </div>
                {autoGenerated.metaTitle && (
                  <p className="text-xs text-gray-500 mt-1">
                    Suggestion: {autoGenerated.metaTitle}
                  </p>
                )}
              </div>

              {/* Meta Description */}
              <div>
                <div className="flex items-center justify-between mb-2">
                  <label className="flex items-center space-x-2 text-sm font-medium text-gray-700 dark:text-gray-300">
                    <Eye className="w-4 h-4" />
                    <span>Meta Description</span>
                  </label>
                  {autoGenerated.metaDescription && autoGenerated.metaDescription !== seoData.metaDescription && (
                    <button
                      onClick={() => handleAutoFill('metaDescription')}
                      className="flex items-center space-x-1 text-xs text-niger-orange hover:text-niger-orange-dark"
                    >
                      <Zap className="w-3 h-3" />
                      <span>Auto-générer</span>
                    </button>
                  )}
                </div>
                <textarea
                  value={seoData.metaDescription}
                  onChange={(e) => setSeoData(prev => ({ ...prev, metaDescription: e.target.value }))}
                  className="w-full px-3 py-2 border border-niger-orange/20 rounded-lg focus:ring-2 focus:ring-niger-orange/20 focus:border-niger-orange bg-white dark:bg-secondary-700 text-niger-green dark:text-niger-green-light"
                  placeholder="Description qui apparaîtra dans les résultats de recherche"
                  rows={3}
                  maxLength={160}
                />
                <div className="flex justify-between text-xs text-gray-500 mt-1">
                  <span>Recommandé: 120-160 caractères</span>
                  <span className={seoData.metaDescription.length > 160 ? 'text-red-500' : ''}>
                    {seoData.metaDescription.length}/160
                  </span>
                </div>
                {autoGenerated.metaDescription && (
                  <p className="text-xs text-gray-500 mt-1">
                    Suggestion: {autoGenerated.metaDescription.substring(0, 100)}...
                  </p>
                )}
              </div>

              {/* Aperçu Google */}
              <div>
                <h3 className="flex items-center space-x-2 text-sm font-semibold text-gray-700 dark:text-gray-300 mb-3">
                  <Search className="w-4 h-4" />
                  <span>Aperçu Google</span>
                </h3>
                <div className="border border-gray-200 dark:border-secondary-600 rounded-lg p-4 bg-gray-50 dark:bg-secondary-700">
                  <div className="text-blue-600 text-lg hover:underline cursor-pointer">
                    {seoData.metaTitle || article?.title || 'Titre de l\'article'}
                  </div>
                  <div className="text-green-700 text-sm">
                    mesri.ne/actualites/{seoData.slug || 'slug-article'}
                  </div>
                  <div className="text-gray-600 text-sm mt-1">
                    {seoData.metaDescription || 'Description de l\'article qui apparaîtra dans les résultats de recherche...'}
                  </div>
                </div>
              </div>

              {/* Actions */}
              <div className="flex space-x-3 pt-4 border-t border-gray-200 dark:border-secondary-700">
                <button
                  onClick={handleOptimize}
                  disabled={loading}
                  className="flex-1 flex items-center justify-center space-x-2 px-4 py-2 bg-niger-green text-white rounded-lg hover:bg-niger-green-dark transition-colors disabled:opacity-50"
                >
                  <TrendingUp className="w-4 h-4" />
                  <span>Optimiser</span>
                </button>
                
                <button
                  onClick={generateSuggestions}
                  className="px-4 py-2 border border-niger-orange text-niger-orange rounded-lg hover:bg-niger-orange/5 transition-colors"
                >
                  <Zap className="w-4 h-4" />
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}