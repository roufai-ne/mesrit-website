// scripts/migrate-users-to-rbac.js
import { connectDB } from '../src/lib/mongodb.js';
import mongoose from 'mongoose';

// Mod√®le User temporaire pour la migration
const UserSchema = new mongoose.Schema({
  username: String,
  email: String,
  password: String,
  role: String,
  status: String,
  isFirstLogin: Boolean,
  lastLogin: Date,
  loginCount: Number,
  assignedDomains: [String],
  assignedEstablishments: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Establishment' }],
  temporaryPermissions: [Object],
  lastRoleChange: Object,
  twoFactorEnabled: Boolean,
  twoFactorSecret: String,
  twoFactorActivatedAt: Date,
  twoFactorDisabledAt: Date,
  twoFactorBackupCodes: [String]
}, { timestamps: true });

const User = mongoose.models.User || mongoose.model('User', UserSchema);

async function migrateUsers() {
  try {
    console.log('üîÑ D√©but de la migration des utilisateurs vers RBAC...');
    
    await connectDB();
    
    // R√©cup√©rer tous les utilisateurs existants
    const users = await User.find({});
    console.log(`üìä ${users.length} utilisateurs trouv√©s pour migration`);

    let migratedCount = 0;
    let errorCount = 0;

    for (const user of users) {
      try {
        console.log(`\nüë§ Migration de l'utilisateur: ${user.username} (${user.role})`);

        // Sauvegarder l'ancien r√¥le
        const oldRole = user.role;
        let newRole = user.role;
        let assignedDomains = [];

        // Mapper les anciens r√¥les vers les nouveaux
        switch (oldRole) {
          case 'admin':
            // Les anciens admins deviennent system-admin par d√©faut
            newRole = 'system-admin';
            // Acc√®s √† tous les domaines
            assignedDomains = ['news', 'documents', 'communications', 'establishments', 'services', 'directors'];
            console.log(`   ‚úÖ admin ‚Üí system-admin (acc√®s complet)`);
            break;

          case 'editor':
            // Les √©diteurs gardent leur r√¥le mais avec domaines par d√©faut
            newRole = 'editor';
            // Acc√®s aux actualit√©s et documents par d√©faut
            assignedDomains = ['news', 'documents'];
            console.log(`   ‚úÖ editor ‚Üí editor (acc√®s news + documents)`);
            break;

          default:
            console.log(`   ‚ö†Ô∏è  R√¥le inconnu: ${oldRole}, assignation par d√©faut √† editor`);
            newRole = 'editor';
            assignedDomains = ['news', 'documents'];
        }

        // Mettre √† jour l'utilisateur
        user.role = newRole;
        user.assignedDomains = assignedDomains;
        
        // Enregistrer le changement de r√¥le
        user.lastRoleChange = {
          previousRole: oldRole,
          newRole: newRole,
          changedBy: null, // Migration automatique
          changedAt: new Date()
        };

        await user.save();
        migratedCount++;
        
        console.log(`   ‚úÖ Migration r√©ussie: ${oldRole} ‚Üí ${newRole}`);
        console.log(`   üìÇ Domaines assign√©s: ${assignedDomains.join(', ')}`);

      } catch (userError) {
        console.error(`   ‚ùå Erreur pour ${user.username}:`, userError.message);
        errorCount++;
      }
    }

    console.log('\nüìà R√©sum√© de la migration:');
    console.log(`   ‚úÖ Utilisateurs migr√©s avec succ√®s: ${migratedCount}`);
    console.log(`   ‚ùå Erreurs: ${errorCount}`);
    console.log(`   üìä Total: ${users.length}`);

    // Afficher la r√©partition finale des r√¥les
    const roleDistribution = await User.aggregate([
      { $group: { _id: '$role', count: { $sum: 1 } } },
      { $sort: { count: -1 } }
    ]);

    console.log('\nüìä R√©partition finale des r√¥les:');
    roleDistribution.forEach(role => {
      console.log(`   ${role._id}: ${role.count} utilisateur(s)`);
    });

    // V√©rifier s'il y a au moins un super-admin
    const superAdminCount = await User.countDocuments({ role: 'super-admin' });
    if (superAdminCount === 0) {
      console.log('\n‚ö†Ô∏è  ATTENTION: Aucun super-admin d√©tect√© !');
      console.log('   Vous devrez manuellement promouvoir un system-admin vers super-admin.');
    }

    console.log('\nüéâ Migration termin√©e avec succ√®s !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    process.exit(1);
  } finally {
    await mongoose.connection.close();
  }
}

// Fonction pour cr√©er un super-admin (√† utiliser apr√®s migration)
async function createSuperAdmin(username, email, password) {
  try {
    await connectDB();
    
    const existingUser = await User.findOne({ 
      $or: [{ username }, { email }] 
    });

    if (existingUser) {
      console.log('‚ùå Un utilisateur avec ce nom ou email existe d√©j√†');
      return;
    }

    const bcrypt = await import('bcryptjs');
    const hashedPassword = await bcrypt.hash(password, 10);

    const superAdmin = new User({
      username,
      email,
      password: hashedPassword,
      role: 'super-admin',
      status: 'active',
      isFirstLogin: false,
      assignedDomains: ['news', 'documents', 'communications', 'establishments', 'services', 'directors'],
      lastRoleChange: {
        previousRole: null,
        newRole: 'super-admin',
        changedBy: null,
        changedAt: new Date()
      }
    });

    await superAdmin.save();
    console.log(`‚úÖ Super-admin cr√©√©: ${username}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du super-admin:', error);
  } finally {
    await mongoose.connection.close();
  }
}

// Fonction pour promouvoir un utilisateur existant
async function promoteToSuperAdmin(username) {
  try {
    await connectDB();
    
    const user = await User.findOne({ username });
    if (!user) {
      console.log(`‚ùå Utilisateur ${username} non trouv√©`);
      return;
    }

    const oldRole = user.role;
    user.role = 'super-admin';
    user.assignedDomains = ['news', 'documents', 'communications', 'establishments', 'services', 'directors'];
    user.lastRoleChange = {
      previousRole: oldRole,
      newRole: 'super-admin',
      changedBy: null, // Promotion manuelle
      changedAt: new Date()
    };

    await user.save();
    console.log(`‚úÖ ${username} promu de ${oldRole} vers super-admin`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la promotion:', error);
  } finally {
    await mongoose.connection.close();
  }
}

// Interface en ligne de commande
const args = process.argv.slice(2);
const command = args[0];

switch (command) {
  case 'migrate':
    migrateUsers();
    break;
    
  case 'create-super-admin':
    if (args.length < 4) {
      console.log('Usage: npm run migrate-users create-super-admin <username> <email> <password>');
      process.exit(1);
    }
    createSuperAdmin(args[1], args[2], args[3]);
    break;
    
  case 'promote':
    if (args.length < 2) {
      console.log('Usage: npm run migrate-users promote <username>');
      process.exit(1);
    }
    promoteToSuperAdmin(args[1]);
    break;
    
  default:
    console.log(`
üîÑ Script de Migration RBAC - MESRIT

Commandes disponibles:
  npm run migrate-users migrate                           - Migrer tous les utilisateurs
  npm run migrate-users create-super-admin <user> <email> <pass> - Cr√©er un super-admin
  npm run migrate-users promote <username>               - Promouvoir vers super-admin

Exemples:
  npm run migrate-users migrate
  npm run migrate-users create-super-admin admin admin@mesrit.ne password123
  npm run migrate-users promote john.doe
    `);
}

export { migrateUsers, createSuperAdmin, promoteToSuperAdmin };